
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Wifi, Loader2, Check, AlertCircle } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface WiFiNetwork {
  ssid: string;
  signal: number;
  secured: boolean;
}

const WiFiSetup = () => {
  const [selectedNetwork, setSelectedNetwork] = useState<string | null>(null);
  const [password, setPassword] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [networks, setNetworks] = useState<WiFiNetwork[]>([]);
  
  const scanNetworks = () => {
    setIsScanning(true);
    setNetworks([]);
    
    // Simulate network scanning delay
    setTimeout(() => {
      // Mock data - in a real app, this would come from the ESP8266
      setNetworks([
        { ssid: '–ö—É—õ–Ω–∞ –ú—Ä–µ–∂–∞', signal: 90, secured: true },
        { ssid: '–ö–æ–º—à–∏—ò—Å–∫–∏_WiFi', signal: 65, secured: true },
        { ssid: '–ì–æ—Å—Ç—É—ò—É—õ–∞ –ú—Ä–µ–∂–∞', signal: 30, secured: false },
        { ssid: 'IoT_–ú—Ä–µ–∂–∞', signal: 80, secured: true },
      ]);
      setIsScanning(false);
    }, 2000);
  };
  
  const connectToWiFi = () => {
    if (!selectedNetwork) return;
    
    setIsConnecting(true);
    setConnectionStatus('idle');
    
    // Simulate connection attempt
    setTimeout(() => {
      // In a real app, this would attempt to configure the ESP8266
      if (Math.random() > 0.3) {
        setConnectionStatus('success');
      } else {
        setConnectionStatus('error');
      }
      setIsConnecting(false);
    }, 3000);
  };
  
  const getSignalStrength = (signal: number) => {
    if (signal >= 70) return '–û–¥–ª–∏—á–∞–Ω';
    if (signal >= 50) return '–î–æ–±–∞—Ä';
    if (signal >= 30) return '–°—Ä–µ–¥—ö–∏';
    return '–°–ª–∞–±';
  };
  
  const getSignalColor = (signal: number) => {
    if (signal >= 70) return 'text-green-600';
    if (signal >= 50) return 'text-amber-500';
    if (signal >= 30) return 'text-orange-500';
    return 'text-red-500';
  };
  
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Wi-Fi –ü–æ–¥–µ—à–∞–≤–∞—ö–∞</h1>
        <p className="text-muted-foreground">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—à–∏—Ç–µ Wi-Fi –≤–µ–∑—É –≤–∞—à–µ–≥ —É—Ä–µ—í–∞—ò–∞</p>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Wifi className="mr-2" size={20} />
            –î–æ—Å—Ç—É–ø–Ω–µ –ú—Ä–µ–∂–µ
          </CardTitle>
          <CardDescription>
            –ò–∑–∞–±–µ—Ä–∏—Ç–µ –º—Ä–µ–∂—É –¥–∞ –±–∏—Å—Ç–µ –ø–æ–≤–µ–∑–∞–ª–∏ –≤–∞—à –ì–∞—Ä–¥–µ–Ω–¢–µ—Ö —É—Ä–µ—í–∞—ò
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Button 
              onClick={scanNetworks} 
              disabled={isScanning}
              variant="outline"
              className="w-full"
            >
              {isScanning ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –°–∫–µ–Ω–∏—Ä–∞—ö–µ...
                </>
              ) : (
                '–°–∫–µ–Ω–∏—Ä–∞—ò –ú—Ä–µ–∂–µ'
              )}
            </Button>
            
            {networks.length > 0 && (
              <div className="border rounded-md divide-y">
                {networks.map((network) => (
                  <div 
                    key={network.ssid}
                    className={`flex items-center justify-between p-3 cursor-pointer hover:bg-muted transition-colors ${
                      selectedNetwork === network.ssid ? 'bg-muted' : ''
                    }`}
                    onClick={() => setSelectedNetwork(network.ssid)}
                  >
                    <div className="flex items-center">
                      <Wifi size={16} className="mr-2" />
                      <div>
                        <div>{network.ssid}</div>
                        <div className={`text-xs ${getSignalColor(network.signal)}`}>
                          {getSignalStrength(network.signal)}
                        </div>
                      </div>
                    </div>
                    {network.secured && <span className="text-xs">üîí</span>}
                  </div>
                ))}
              </div>
            )}
            
            {selectedNetwork && (
              <div className="space-y-4 mt-6">
                <div className="space-y-2">
                  <Label htmlFor="wifi-password">–õ–æ–∑–∏–Ω–∫–∞ –∑–∞ {selectedNetwork}</Label>
                  <Input 
                    id="wifi-password"
                    type="password"
                    placeholder="–£–Ω–µ—Å–∏—Ç–µ –ª–æ–∑–∏–Ω–∫—É –º—Ä–µ–∂–µ"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
                
                <Button 
                  onClick={connectToWiFi} 
                  disabled={isConnecting}
                  className="w-full"
                >
                  {isConnecting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      –ü–æ–≤–µ–∑–∏–≤–∞—ö–µ...
                    </>
                  ) : (
                    '–ü–æ–≤–µ–∂–∏'
                  )}
                </Button>
                
                {connectionStatus === 'success' && (
                  <Alert variant="default" className="bg-green-50 border-green-200 text-green-800">
                    <Check className="h-4 w-4" />
                    <AlertTitle>–£—Å–ø–µ—à–Ω–æ</AlertTitle>
                    <AlertDescription>
                      –£—Å–ø–µ—à–Ω–æ –ø–æ–≤–µ–∑–∏–≤–∞—ö–µ –Ω–∞ {selectedNetwork}. –í–∞—à —É—Ä–µ—í–∞—ò —ò–µ —Å–∞–¥–∞ –Ω–∞ –º—Ä–µ–∂–∏.
                    </AlertDescription>
                  </Alert>
                )}
                
                {connectionStatus === 'error' && (
                  <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>–ü–æ–≤–µ–∑–∏–≤–∞—ö–µ –Ω–∏—ò–µ —É—Å–ø–µ–ª–æ</AlertTitle>
                    <AlertDescription>
                      –ù–∏—ò–µ –º–æ–≥—É—õ–µ –ø–æ–≤–µ–∑–∞—Ç–∏ —Å–µ –Ω–∞ {selectedNetwork}. –ü—Ä–æ–≤–µ—Ä–∏—Ç–µ –ª–æ–∑–∏–Ω–∫—É –∏ –ø–æ–∫—É—à–∞—ò—Ç–µ –ø–æ–Ω–æ–≤–æ.
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>–†—É—á–Ω–∞ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞</CardTitle>
          <CardDescription>
            –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–µ—Ç–µ —Ä—É—á–Ω–æ —É–Ω–µ—Ç–∏ –¥–µ—Ç–∞—ô–µ –≤–∞—à–µ –º—Ä–µ–∂–µ
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="ssid">–ò–º–µ –ú—Ä–µ–∂–µ (SSID)</Label>
              <Input id="ssid" placeholder="–£–Ω–µ—Å–∏—Ç–µ –∏–º–µ –º—Ä–µ–∂–µ" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="manual-password">–õ–æ–∑–∏–Ω–∫–∞</Label>
              <Input id="manual-password" type="password" placeholder="–£–Ω–µ—Å–∏—Ç–µ –ª–æ–∑–∏–Ω–∫—É –º—Ä–µ–∂–µ" />
            </div>
            <Button variant="outline" className="w-full">–†—É—á–Ω–æ –ü–æ–≤–µ–∑–∏–≤–∞—ö–µ</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default WiFiSetup;
